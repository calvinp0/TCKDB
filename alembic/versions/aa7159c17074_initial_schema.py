"""initial schema

Revision ID: aa7159c17074
Revises:
Create Date: 2025-08-07 16:18:22.457504

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from tckdb.backend.app.models.common import MsgpackExt

# revision identifiers, used by Alembic.
revision: str = "aa7159c17074"
down_revision = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("orcid", sa.String(length=19), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("first_name", "last_name", name="_author_name_uc"),
    )
    op.create_index(op.f("ix_author_orcid"), "author", ["orcid"], unique=True)
    op.create_table(
        "bot",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("version", sa.String(length=100), nullable=False),
        sa.Column("url", sa.String(length=255), nullable=False),
        sa.Column("git_hash", sa.String(length=500), nullable=True),
        sa.Column("git_branch", sa.String(length=100), nullable=True),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("name", "version", name="_bot_name_version_uc"),
    )
    op.create_table(
        "ess",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("version", sa.String(length=100), nullable=False),
        sa.Column("revision", sa.String(length=100), nullable=False),
        sa.Column("url", sa.String(length=255), nullable=False),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "name", "version", "revision", name="ess_name_version_revision_uc"
        ),
    )
    op.create_table(
        "level",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("method", sa.String(length=500), nullable=False),
        sa.Column("basis", sa.String(length=500), nullable=True),
        sa.Column("auxiliary_basis", sa.String(length=500), nullable=True),
        sa.Column("dispersion", sa.String(length=500), nullable=True),
        sa.Column("grid", sa.String(length=500), nullable=True),
        sa.Column("level_arguments", sa.String(length=500), nullable=True),
        sa.Column("solvation_method", sa.String(length=500), nullable=True),
        sa.Column("solvent", sa.String(length=500), nullable=True),
        sa.Column("solvation_description", sa.String(length=1000), nullable=True),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "literature",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(length=10), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column("journal", sa.String(length=255), nullable=True),
        sa.Column("publisher", sa.String(length=255), nullable=True),
        sa.Column("volume", sa.Integer(), nullable=True),
        sa.Column("issue", sa.Integer(), nullable=True),
        sa.Column("page_start", sa.Integer(), nullable=True),
        sa.Column("page_end", sa.Integer(), nullable=True),
        sa.Column("editors", sa.String(length=255), nullable=True),
        sa.Column("edition", sa.String(length=50), nullable=True),
        sa.Column("chapter_title", sa.String(length=255), nullable=True),
        sa.Column("publication_place", sa.String(length=255), nullable=True),
        sa.Column("advisor", sa.String(length=255), nullable=True),
        sa.Column("doi", sa.String(length=255), nullable=True),
        sa.Column("isbn", sa.String(length=255), nullable=True),
        sa.Column("url", sa.String(length=500), nullable=True),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "lj",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("sigma", MsgpackExt(), nullable=False),
        sa.Column("epsilon", MsgpackExt(), nullable=False),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "person",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("affiliation", sa.String(length=255), nullable=False),
        sa.Column("uploaded_species", sa.Integer(), nullable=True),
        sa.Column("uploaded_non_physical_species", sa.Integer(), nullable=True),
        sa.Column("uploaded_reactions", sa.Integer(), nullable=True),
        sa.Column("uploaded_networks", sa.Integer(), nullable=True),
        sa.Column("reviewed_species", sa.Integer(), nullable=True),
        sa.Column("reviewed_non_physical_species", sa.Integer(), nullable=True),
        sa.Column("reviewed_reactions", sa.Integer(), nullable=True),
        sa.Column("reviewed_networks", sa.Integer(), nullable=True),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "reaction",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("formal_charge", sa.Integer(), nullable=False),
        sa.Column("multiplicity", sa.Integer(), nullable=False),
        sa.Column("family", sa.String(length=255), nullable=True),
        sa.Column("labels", MsgpackExt(), nullable=True),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "trans",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("model", sa.String(length=100), nullable=False),
        sa.Column("parameters", MsgpackExt(), nullable=False),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "vdw",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("inchi_augmented", sa.String(length=5000), nullable=False),
        sa.Column("constituents", MsgpackExt(), nullable=False),
        sa.Column("molecular_formula", sa.String(length=255), nullable=True),
        sa.Column("molecular_weight", sa.Float(), nullable=True),
        sa.Column("charge", sa.Integer(), nullable=False),
        sa.Column("multiplicity", sa.Integer(), nullable=False),
        sa.Column("labels", postgresql.ARRAY(sa.String(length=255)), nullable=True),
        sa.Column("fragment_orientation", MsgpackExt(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_vdw_id"), "vdw", ["id"], unique=False)
    op.create_table(
        "transition_state",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(length=255), nullable=True),
        sa.Column("charge", sa.Integer(), nullable=False),
        sa.Column("multiplicity", sa.Integer(), nullable=False),
        sa.Column("coordinates", MsgpackExt(), nullable=False),
        sa.Column("opt_level_id", sa.Integer(), nullable=True),
        sa.Column("freq_level_id", sa.Integer(), nullable=True),
        sa.Column("sp_level_id", sa.Integer(), nullable=False),
        sa.Column("opt_ess_id", sa.Integer(), nullable=True),
        sa.Column("freq_ess_id", sa.Integer(), nullable=True),
        sa.Column("sp_ess_id", sa.Integer(), nullable=False),
        sa.Column("opt_path", sa.String(length=5000), nullable=True),
        sa.Column("freq_path", sa.String(length=5000), nullable=True),
        sa.Column("sp_path", sa.String(length=5000), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["opt_level_id"], ["level.id"]),
        sa.ForeignKeyConstraint(["freq_level_id"], ["level.id"]),
        sa.ForeignKeyConstraint(["sp_level_id"], ["level.id"]),
        sa.ForeignKeyConstraint(["opt_ess_id"], ["ess.id"]),
        sa.ForeignKeyConstraint(["freq_ess_id"], ["ess.id"]),
        sa.ForeignKeyConstraint(["sp_ess_id"], ["ess.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "encorr",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "supported_elements",
            postgresql.ARRAY(sa.String(), zero_indexes=True),
            nullable=False,
        ),
        sa.Column("energy_unit", sa.String(length=255), nullable=False),
        sa.Column("aec", MsgpackExt(), nullable=True),
        sa.Column("bac", MsgpackExt(), nullable=True),
        sa.Column("isodesmic_reactions", MsgpackExt(), nullable=True),
        sa.Column("isodesmic_high_level_id", sa.Integer(), nullable=True),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.Column("level_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["isodesmic_high_level_id"], ["level.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["level_id"], ["level.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "freqscale",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("factor", sa.Float(), nullable=False),
        sa.Column("level_id", sa.Integer(), nullable=False),
        sa.Column("source", sa.String(length=255), nullable=False),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["level.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("level_id"),
    )
    op.create_table(
        "literature_author",
        sa.Column("literature_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["author_id"], ["author.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(
            ["literature_id"], ["literature.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("literature_id", "author_id"),
    )
    op.create_table(
        "nonphysicalspecies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(length=255), nullable=True),
        sa.Column(
            "timestamp",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("retracted", sa.String(length=255), nullable=True),
        sa.Column("reviewed", sa.Boolean(), nullable=False),
        sa.Column("approved", sa.Boolean(), nullable=False),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.Column("smiles", sa.String(length=5000), nullable=False),
        sa.Column("inchi", sa.String(length=5000), nullable=False),
        sa.Column("inchi_key", sa.String(length=5000), nullable=False),
        sa.Column("charge", sa.Integer(), nullable=False),
        sa.Column("multiplicity", sa.Integer(), nullable=False),
        sa.Column("electronic_state", sa.String(length=150), nullable=False),
        sa.Column("coordinates", MsgpackExt(), nullable=False),
        sa.Column("graph", sa.String(length=100000), nullable=True),
        sa.Column(
            "fragments",
            postgresql.ARRAY(sa.Integer(), zero_indexes=True),
            nullable=True,
        ),
        sa.Column("fragment_orientation", MsgpackExt(), nullable=True),
        sa.Column("chirality", MsgpackExt(), nullable=True),
        sa.Column("conformation_method", sa.String(length=500), nullable=False),
        sa.Column("is_well", sa.Boolean(), nullable=False),
        sa.Column("is_global_min", sa.Boolean(), nullable=False),
        sa.Column("global_min_geometry", MsgpackExt(), nullable=True),
        sa.Column("is_ts", sa.Boolean(), nullable=False),
        sa.Column("irc_trajectories", MsgpackExt(), nullable=True),
        sa.Column("literature_id", sa.Integer(), nullable=True),
        sa.Column("bot_id", sa.Integer(), nullable=True),
        sa.Column("opt_level_id", sa.Integer(), nullable=True),
        sa.Column("freq_level_id", sa.Integer(), nullable=True),
        sa.Column("scan_level_id", sa.Integer(), nullable=True),
        sa.Column("irc_level_id", sa.Integer(), nullable=True),
        sa.Column("sp_level_id", sa.Integer(), nullable=False),
        sa.Column("opt_ess_id", sa.Integer(), nullable=True),
        sa.Column("freq_ess_id", sa.Integer(), nullable=True),
        sa.Column("scan_ess_id", sa.Integer(), nullable=True),
        sa.Column("irc_ess_id", sa.Integer(), nullable=True),
        sa.Column("sp_ess_id", sa.Integer(), nullable=False),
        sa.Column("opt_path", sa.String(length=5000), nullable=True),
        sa.Column("freq_path", sa.String(length=5000), nullable=True),
        sa.Column("scan_paths", MsgpackExt(), nullable=True),
        sa.Column("irc_paths", MsgpackExt(), nullable=True),
        sa.Column("sp_path", sa.String(length=5000), nullable=False),
        sa.Column("unconverged_jobs", MsgpackExt(), nullable=True),
        sa.Column("extras", MsgpackExt(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["bot_id"],
            ["bot.id"],
        ),
        sa.ForeignKeyConstraint(
            ["freq_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["freq_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["irc_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["irc_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["literature_id"],
            ["literature.id"],
        ),
        sa.ForeignKeyConstraint(
            ["opt_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["opt_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["scan_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["scan_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sp_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sp_level_id"],
            ["level.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "reaction_entry",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("reaction_id", sa.Integer(), nullable=False),
        sa.Column("kinetics", MsgpackExt(), nullable=True),
        sa.Column("kinetics_fit", MsgpackExt(), nullable=True),
        sa.Column("fit_error", MsgpackExt(), nullable=True),
        sa.Column("atom_mapping", MsgpackExt(), nullable=True),
        sa.Column("uncertainties", MsgpackExt(), nullable=True),
        sa.Column("ess_id", sa.Integer(), nullable=True),
        sa.Column("literature_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["reaction_id"],
            ["reaction.id"],
        ),
        sa.ForeignKeyConstraint(["ess_id"], ["ess.id"]),
        sa.ForeignKeyConstraint(["literature_id"], ["literature.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_reaction_entry_id"), "reaction_entry", ["id"], unique=False
    )
    op.create_table(
        "vdw_entry",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("vdw_id", sa.Integer(), nullable=False),
        sa.Column("xyz", MsgpackExt(), nullable=True),
        sa.Column("energy", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["vdw_id"],
            ["vdw.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_vdw_entry_id"), "vdw_entry", ["id"], unique=False)
    op.create_table(
        "np_species_authors",
        sa.Column("np_species_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["person.id"],
        ),
        sa.ForeignKeyConstraint(
            ["np_species_id"],
            ["nonphysicalspecies.id"],
        ),
        sa.PrimaryKeyConstraint("np_species_id", "author_id"),
    )
    op.create_table(
        "np_species_reviewers",
        sa.Column("np_species_id", sa.Integer(), nullable=False),
        sa.Column("reviewer_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["np_species_id"],
            ["nonphysicalspecies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewer_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("np_species_id", "reviewer_id"),
    )
    op.create_table(
        "species",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(length=255), nullable=True),
        sa.Column("statmech_software", sa.String(length=150), nullable=True),
        sa.Column(
            "timestamp",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("retracted", sa.String(length=255), nullable=True),
        sa.Column("reviewed", sa.Boolean(), nullable=False),
        sa.Column("approved", sa.Boolean(), nullable=True),
        sa.Column("reviewer_flags", MsgpackExt(), nullable=True),
        sa.Column("smiles", sa.String(length=5000), nullable=False),
        sa.Column("inchi", sa.String(length=5000), nullable=False),
        sa.Column("inchi_key", sa.String(length=27), nullable=False),
        sa.Column("charge", sa.Integer(), nullable=False),
        sa.Column("multiplicity", sa.Integer(), nullable=False),
        sa.Column("electronic_state", sa.String(length=150), nullable=False),
        sa.Column("coordinates", MsgpackExt(), nullable=False),
        sa.Column("graph", sa.String(length=100000), nullable=True),
        sa.Column("fragments", postgresql.ARRAY(sa.Integer()), nullable=True),
        sa.Column("fragment_orientation", MsgpackExt(), nullable=True),
        sa.Column("external_symmetry", sa.Integer(), nullable=False),
        sa.Column("point_group", sa.String(length=6), nullable=False),
        sa.Column("chirality", MsgpackExt(), nullable=True),
        sa.Column("conformation_method", sa.String(length=500), nullable=False),
        sa.Column("is_well", sa.Boolean(), nullable=False),
        sa.Column("is_global_min", sa.Boolean(), nullable=True),
        sa.Column("global_min_geometry", MsgpackExt(), nullable=True),
        sa.Column("is_ts", sa.Boolean(), nullable=False),
        sa.Column("irc_trajectories", MsgpackExt(), nullable=True),
        sa.Column("electronic_energy", sa.Float(), nullable=False),
        sa.Column("E0", sa.Float(), nullable=False),
        sa.Column("active_space", MsgpackExt(), nullable=True),
        sa.Column("hessian", MsgpackExt(), nullable=True),
        sa.Column(
            "frequencies",
            postgresql.ARRAY(sa.Float(), dimensions=1, zero_indexes=True),
            nullable=True,
        ),
        sa.Column(
            "scaled_projected_frequencies",
            postgresql.ARRAY(sa.Float(), dimensions=1, zero_indexes=True),
            nullable=False,
        ),
        sa.Column("normal_displacement_modes", MsgpackExt(), nullable=True),
        sa.Column("freq_scale_id", sa.Integer(), nullable=True),
        sa.Column("rigid_rotor", sa.String(length=50), nullable=False),
        sa.Column("statmech_treatment", sa.String(length=50), nullable=True),
        sa.Column("rotational_constants", MsgpackExt(), nullable=True),
        sa.Column("torsions", MsgpackExt(), nullable=True),
        sa.Column("conformers", MsgpackExt(), nullable=True),
        sa.Column("H298", sa.Float(), nullable=False),
        sa.Column("S298", sa.Float(), nullable=False),
        sa.Column(
            "Cp_values",
            postgresql.ARRAY(sa.Float(), dimensions=1, zero_indexes=True),
            nullable=False,
        ),
        sa.Column(
            "Cp_T_list",
            postgresql.ARRAY(sa.Float(), dimensions=1, zero_indexes=True),
            nullable=False,
        ),
        sa.Column("heat_capacity_model", MsgpackExt(), nullable=True),
        sa.Column("encorr_id", sa.Integer(), nullable=True),
        sa.Column("literature_id", sa.Integer(), nullable=True),
        sa.Column("bot_id", sa.Integer(), nullable=True),
        sa.Column("opt_level_id", sa.Integer(), nullable=True),
        sa.Column("freq_level_id", sa.Integer(), nullable=True),
        sa.Column("scan_level_id", sa.Integer(), nullable=True),
        sa.Column("irc_level_id", sa.Integer(), nullable=True),
        sa.Column("sp_level_id", sa.Integer(), nullable=False),
        sa.Column("opt_ess_id", sa.Integer(), nullable=True),
        sa.Column("freq_ess_id", sa.Integer(), nullable=True),
        sa.Column("scan_ess_id", sa.Integer(), nullable=True),
        sa.Column("irc_ess_id", sa.Integer(), nullable=True),
        sa.Column("sp_ess_id", sa.Integer(), nullable=False),
        sa.Column("opt_path", sa.String(length=5000), nullable=True),
        sa.Column("freq_path", sa.String(length=5000), nullable=True),
        sa.Column("scan_paths", MsgpackExt(), nullable=True),
        sa.Column("irc_paths", MsgpackExt(), nullable=True),
        sa.Column("sp_path", sa.String(length=5000), nullable=False),
        sa.Column("unconverged_jobs", MsgpackExt(), nullable=True),
        sa.Column("extras", MsgpackExt(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["bot_id"],
            ["bot.id"],
        ),
        sa.ForeignKeyConstraint(
            ["encorr_id"],
            ["encorr.id"],
        ),
        sa.ForeignKeyConstraint(
            ["freq_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["freq_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["freq_scale_id"],
            ["freqscale.id"],
        ),
        sa.ForeignKeyConstraint(
            ["irc_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["irc_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["literature_id"], ["literature.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(
            ["opt_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["opt_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["scan_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["scan_level_id"],
            ["level.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sp_ess_id"],
            ["ess.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sp_level_id"],
            ["level.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "reaction_participant",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("reaction_id", sa.Integer(), nullable=False),
        sa.Column("step_index", sa.Integer(), nullable=False),
        sa.Column("role", sa.String(length=50), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=True),
        sa.Column("ts_id", sa.Integer(), nullable=True),
        sa.Column("vdw_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["reaction_id"],
            ["reaction.id"],
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
        ),
        sa.ForeignKeyConstraint(["ts_id"], ["transition_state.id"]),
        sa.ForeignKeyConstraint(
            ["vdw_id"],
            ["vdw.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_reaction_participant_id"),
        "reaction_participant",
        ["id"],
        unique=False,
    )
    op.create_table(
        "species_authors",
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["person.id"],
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
        ),
        sa.PrimaryKeyConstraint("species_id", "author_id"),
    )
    op.create_table(
        "species_reviewers",
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("reviewer_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["reviewer_id"],
            ["person.id"],
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
        ),
        sa.PrimaryKeyConstraint("species_id", "reviewer_id"),
    )
    op.create_table(
        "transition_state_authors",
        sa.Column("transition_state_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["transition_state_id"], ["transition_state.id"]),
        sa.ForeignKeyConstraint(["author_id"], ["person.id"]),
        sa.PrimaryKeyConstraint("transition_state_id", "author_id"),
    )
    op.create_table(
        "transition_state_reviewers",
        sa.Column("transition_state_id", sa.Integer(), nullable=False),
        sa.Column("reviewer_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["transition_state_id"], ["transition_state.id"]),
        sa.ForeignKeyConstraint(["reviewer_id"], ["person.id"]),
        sa.PrimaryKeyConstraint("transition_state_id", "reviewer_id"),
    )
    op.create_table(
        "reaction_authors",
        sa.Column("reaction_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["reaction_id"], ["reaction.id"]),
        sa.ForeignKeyConstraint(["author_id"], ["person.id"]),
        sa.PrimaryKeyConstraint("reaction_id", "author_id"),
    )
    op.create_table(
        "reaction_reviewers",
        sa.Column("reaction_id", sa.Integer(), nullable=False),
        sa.Column("reviewer_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["reaction_id"], ["reaction.id"]),
        sa.ForeignKeyConstraint(["reviewer_id"], ["person.id"]),
        sa.PrimaryKeyConstraint("reaction_id", "reviewer_id"),
    )
    op.create_table(
        "reaction_entry_authors",
        sa.Column("reaction_entry_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["reaction_entry_id"], ["reaction_entry.id"]),
        sa.ForeignKeyConstraint(["author_id"], ["person.id"]),
        sa.PrimaryKeyConstraint("reaction_entry_id", "author_id"),
    )
    op.create_table(
        "reaction_entry_reviewers",
        sa.Column("reaction_entry_id", sa.Integer(), nullable=False),
        sa.Column("reviewer_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["reaction_entry_id"], ["reaction_entry.id"]),
        sa.ForeignKeyConstraint(["reviewer_id"], ["person.id"]),
        sa.PrimaryKeyConstraint("reaction_entry_id", "reviewer_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("reaction_entry_reviewers")
    op.drop_table("reaction_entry_authors")
    op.drop_table("reaction_reviewers")
    op.drop_table("reaction_authors")
    op.drop_table("transition_state_reviewers")
    op.drop_table("transition_state_authors")
    op.drop_table("species_reviewers")
    op.drop_table("species_authors")
    op.drop_index(
        op.f("ix_reaction_participant_id"), table_name="reaction_participant"
    )
    op.drop_table("reaction_participant")
    op.drop_table("species")
    op.drop_table("np_species_reviewers")
    op.drop_table("np_species_authors")
    op.drop_index(op.f("ix_vdw_entry_id"), table_name="vdw_entry")
    op.drop_table("vdw_entry")
    op.drop_index(op.f("ix_reaction_entry_id"), table_name="reaction_entry")
    op.drop_table("reaction_entry")
    op.drop_table("transition_state")
    op.drop_table("nonphysicalspecies")
    op.drop_table("literature_author")
    op.drop_table("freqscale")
    op.drop_table("encorr")
    op.drop_index(op.f("ix_vdw_id"), table_name="vdw")
    op.drop_table("vdw")
    op.drop_table("trans")
    op.drop_table("reaction")
    op.drop_table("person")
    op.drop_table("lj")
    op.drop_table("literature")
    op.drop_table("level")
    op.drop_table("ess")
    op.drop_table("bot")
    op.drop_index(op.f("ix_author_orcid"), table_name="author")
    op.drop_table("author")
    # ### end Alembic commands ###
